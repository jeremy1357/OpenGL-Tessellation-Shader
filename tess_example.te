#version 410 core
layout (location = 0) in vec3 te_position[];
layout (location = 1) in vec2 te_uv[];
layout (location = 2) in vec3 te_normal[];
layout(triangles, equal_spacing, cw) in;

layout (location = 0) out vec3 frag_position;
layout (location = 1) out vec2 frag_uv;
layout (location = 2) out vec3 frag_normal;

uniform mat4 vp_matrix;
uniform sampler2D displacement_texture;
uniform sampler2D normal_texture;
uniform float scale;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main(void) 
{
    frag_position = interpolate3D(te_position[0].xyz, te_position[1].xyz, te_position[2].xyz);
 	frag_uv = interpolate2D(te_uv[0], te_uv[1], te_uv[2]);
 	frag_normal = normalize(interpolate3D(te_normal[0], te_normal[1], te_normal[2]));
	float displacement = texture(displacement_texture, frag_uv.xy).x;
 	frag_position += texture(normal_texture, frag_uv.xy).x * displacement * scale;
    
    gl_Position = vp_matrix * vec4(frag_position.xyz, 1.0f);
}